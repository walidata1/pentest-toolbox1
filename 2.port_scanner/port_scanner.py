#!/usr/bin/env python
"""
Simple port scanner script.

Usage:
    python port_scanner.py

This script allows the user to input an IP address and a port range to scan for open ports.
"""

import socket
import subprocess
import sys
from datetime import datetime

def clear_screen():
    """Clear the terminal screen."""
    subprocess.call(['clear'])

def scan_port(target_ip, port):
    """
    Scan a specific port on the given IP address.

    Parameters:
        target_ip (str): The IP address to scan.
        port (int): The port number to scan.

    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex((target_ip, port))
    if result == 0:
        print(f"Port {port}: Open")
    else:
        print(f"Port {port}: Closed")
    sock.close()

def port_scanner(ip_address, start_port_param, end_port_param):
    """
    Scan a range of ports on the given IP address.

    Parameters:
        ip_address (str): The IP address to scan.
        start_port_param (int): The starting port number of the range.
        end_port_param (int): The ending port number of the range.

    """
    clear_screen()
    print("-" * 60)
    print(f"Scanning remote host {ip_address} for ports {start_port_param} to {end_port_param}")
    print("-" * 60)

    start_time = datetime.now()

    try:
        for port in range(start_port_param, end_port_param + 1):
            scan_port(ip_address, port)

    except KeyboardInterrupt:
        print("You pressed Ctrl+C")
        sys.exit()

    except socket.gaierror:
        print('Hostname could not be resolved. Exiting')
        sys.exit()

    except socket.error:
        print("Couldn't connect to the server. Exiting")
        sys.exit()

    end_time = datetime.now()
    total = end_time - start_time

    print("-" * 60)
    print('Scanning Completed in: ', total)

if __name__ == "__main__":
    scan_ip = input("\nEnter the IP address to scan: ")
    start_port = int(input("Enter the starting port: "))
    end_port = int(input("Enter the ending port: "))

    port_scanner(scan_ip, start_port, end_port)
