#!/usr/bin/env python
"""Password Cracker

This script attempts to crack a hash using a wordlist.

Usage:
    python password_cracker.py

Replace 'hash' and 'hash_type' with the actual hashed code and hash type respectively.
"""

import hashlib

# List of supported hash types
hash_names = [
    'blake2b',
    'blake2s',
    'md5',
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha3_224',
    'sha3_256',
    'sha3_384',
    'sha3_512',
    'sha512',
]

def crack_hash(hashed_code, wordlist, hash_type=None):
    """Crack a hash using a wordlist.

    Args:
        hashed_code (str): The hash to crack.
        wordlist (str): The path to the wordlist.

    Returns:
        str: The cracked hash.
    """
    hash_fn = getattr(hashlib, hash_type, None)
    if hash_fn is None or hash_type not in hash_names:
        # not supported hash type
        raise ValueError(f'[!] Invalid hash type: {hash_type}, supported are {hash_names}')
    # open the wordlist with utf-8 encoding
    with open(wordlist, 'r', encoding='utf-8') as file:
        # iterate over each line
        for line in file:
            if hash_fn(line.strip().encode()).hexdigest() == hashed_code:
                return line
    # return None if no match is found
    return None

if __name__ == "__main__":
    # Replace 'your_hashed_code' and 'your_hash_type' with the actual values
    your_hashed_code = input("Enter the hashed code: ")
    your_hash_type = input("Enter the hash type (e.g., md5, sha256): ")
    # Provide the path to the wordlist within the script
    WORDLIST_PATH = "./wordlist"
    print()
    try:
        # Attempt to crack the hash
        found_password = crack_hash(your_hashed_code, WORDLIST_PATH, your_hash_type)
        if found_password:
            print("[+] Found password:", found_password)
        else:
            print("[!] Password not found in the wordlist.")
    except ValueError as e:
        print(str(e))
